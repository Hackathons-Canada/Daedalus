import { NextRequest, NextResponse } from "next/server";
import { signIn } from "@/auth";
import bcrypt from "bcryptjs";
import { and, eq, gt, isNull } from "drizzle-orm";
import { AuthError } from "next-auth";

import { ApiResponse } from "@/types/api";
import { db } from "@/lib/db";
import { getUserByEmail } from "@/lib/db/queries/user";
import { passwordResetTokens, users } from "@/lib/db/schema";
import { ResetPasswordSchema } from "@/lib/validations/reset-password";

export async function POST(
  req: NextRequest,
): Promise<NextResponse<ApiResponse>> {
  try {
    const body = await req.json();

    const validatedFields = ResetPasswordSchema.safeParse(body);

    if (!validatedFields.success) {
      return NextResponse.json({
        success: false,
        message: "Password is not strong enough!",
      });
    }

    const { password, token } = validatedFields.data;

    const results = await db
      .select({ userId: passwordResetTokens.userId })
      .from(passwordResetTokens)
      .where(
        and(
          eq(passwordResetTokens.token, token),
          gt(
            passwordResetTokens.createdAt,
            // 15 minutes
            new Date(Date.now() - 1000 * 60 * 60 * 0.25),
          ),
          // One time token
          isNull(passwordResetTokens.resetAt),
        ),
      );

    if (!results.length) {
      return NextResponse.json({
        success: false,
        message: "Password changed successfully!",
      });
    }
    const { userId } = results[0];
    const hashedPassword = await bcrypt.hash(password, 10);

    await db.transaction(async (tx) => {
      await tx
        .update(users)
        .set({
          password: hashedPassword,
        })
        .where(eq(users.id, userId)),
        // Ensure that every session token generated by user is invalidated
        await tx
          .update(passwordResetTokens)
          .set({
            resetAt: new Date(),
          })
          .where(eq(passwordResetTokens.userId, userId));
    });

    // If everything is successful
    return NextResponse.json({
      success: true,
      message: "Password changed successfully!",
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      message: "Something went wrong, please try again.",
    });
  }
}
